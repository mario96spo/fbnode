<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TMcraft</name>
    </assembly>
    <members>
        <member name="T:TMcraft.Internal">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMcraft.Internal.InternalUse(System.String@,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="input2"></param>
        </member>
        <member name="T:TMcraft.TMcraftNodeAPI">
            <summary>
            TMcraftNodeAPI is the main class of the TMcraft API that creates a connection between the Node UI and TMflow. In addition, it contains different member (or provider) functions in order to interact with TMflow, such as creating Project variables and jogging the robot.
            </summary>
        </member>
        <member name="F:TMcraft.TMcraftNodeAPI.Version">
            <summary>
            A member of the TMcraftNodeAPI class. Returns a string represents the version of the current TMcraft.dll and is read-only.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.VariableProvider">
            <summary>
            VariableProvider provides functions for TMcraft to access or modify the variables of the robot.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.PointProvider">
            <summary>
            PointProvider provides functions for TMcraft Node to access or modify Point values within the current project.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.RobotStatusProvider">
            <summary>
            RobotStatusProvider provides functions for TMcraft Node to access different robot status information.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.BaseProvider">
            <summary>
            BaseProvider provides functions for TMcraft Node to access or modify the base value of the current Project.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.DataStorageProvider">
            <summary>
            DataStorageProvider provides functions for TMcraft Node to access its own temporarily stored data for configuration purposes, for example). Please note that a TMflow project can contain a single TMcraft Node in duplicate, and these nodes do not share their own data with each another. TMcraft API ensures each node accesses its own temporarily stored data, depending on the identity/location of the node.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.IOProvider">
            <summary>
            IOProvider provides functions for TMcraft Node to interact with system I/O.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.TCPProvider">
            <summary>
            TcpProvider provides functions for TMcraft Node to access or modify TCPs with the robot.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.VisionProvider">
            <summary>
            VisionProvider provides functions for TMcraft node to access or interact with the vision jobs of the current Project.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.RobotJogProvider">
            <summary>
            RobotJogProvider provides functions for TMcraft Node to jog the robot, either by commands or the Controller Interface.
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftNodeAPI.SystemProvider">
            <summary>
            SystemProvider provides functions for TMcraft Node to interact with TMflow System Settings.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftNodeAPI.Close">
            <summary>
            Closes the current TMcraft node.
            </summary>
            <returns>void</returns>
        </member>
        <member name="M:TMcraft.TMcraftNodeAPI.GetErrMsg(System.UInt32,System.String@)">
            <summary>
            Output the error message according to the error code input. This function is used for checking the result of calling Provider functions.
            </summary>
            <param name="inputData">The unit error code returned by most Provider functions.</param>
            <param name="message">The output error message that refers to the input error code.</param>
            <returns>Returns TMcraftErr.OK if the function works properly; otherwise, re-turns the corresponding TMcraftErr. For more detail, please check enum TMcraft.TMcraftErr.</returns>
        </member>
        <member name="T:TMcraft.ScriptWriteProvider">
            <summary>
            ScriptWriteProvider class can be compared to a container of TMscript that is usually used within TMcraftNodeEntry.InscribeScript (), so that the TMscript can be implemented in the current Project when the Node UI is closed.
            </summary>
        </member>
        <member name="M:TMcraft.ScriptWriteProvider.AppendLine(System.String)">
            <summary>
            Adds a line of script through auto-indentation (i.e., a newline followed by a scriptLine) after the script on the ScriptWriteProvider Type.
            </summary>
            <param name="scriptLine">Script being added with auto-indentation.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.ScriptWriteProvider.AppendScript(System.String)">
            <summary>
            Adds a script code (without auto-indentation) to the back of the script on the ScriptWriteProvider Type.
            </summary>
            <param name="script">Script being added without auto-indentation.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.ScriptWriteProvider.GetScript">
            <summary>
            Gets the script from the ScriptWriteProvider object .
            </summary>
            <returns>Script from the ScriptWriteProvider object.</returns>
        </member>
        <member name="T:TMcraft.DataStorageProvider">
            <summary>
            DataStorageProvider provides functions for TMcraft Node to access its own temporarily stored data for configuration purposes, for example). Please note that a TMflow project can contain a single TMcraft Node in duplicate, and these nodes do not share their own data with each another. TMcraft API ensures each node accesses its own temporarily stored data, depending on the identity/location of the node.
            </summary>
        </member>
        <member name="M:TMcraft.DataStorageProvider.SaveData(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Saves a DictionaryType (a collection of string keys and string data). Please note that this dictionary of data belongs to the current TMcraft Node only.
            </summary>
            <param name="dataSet">A Dictionary Type of data stored within the current node.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.SaveData(System.String,System.String)">
            <summary>
            Saves a string data, along with its string key.  Please note that this data belongs to the current TMcraft Node only.
            </summary>
            <param name="key">A string key that provides access to its corresponding data.</param>
            <param name="data">String data being stored.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.SaveData(System.String,TMcraft.BaseInfo)">
            <summary>
            Saves a BaseInfo type data, along with its corresponding string key. Please note that this data belongs to the current TMcraft Node only.
            </summary>
            <param name="key">A string key that provides access to its corresponding data.</param>
            <param name="data">BaseInfo data being stored.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.SaveData(System.Collections.Generic.Dictionary{System.String,TMcraft.BaseInfo})">
            <summary>
            Saves a Dictionary Type, along with string keys and BaseInfo data it contains. Please note that this dictionary of data belongs to the current TMcraft Node only.
            </summary>
            <param name="dataSet">A Dictionary type of data stored within the current node.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.SaveData(System.String,TMcraft.PointInfo)">
            <summary>
            Save a PointInfo type data, along with its corresponding string key. Please note that this data belongs to the current TMcraft node only.
            </summary>
            <param name="key">A string key that provides access to its corresponding data.</param>
            <param name="data">PointInfo type data being stored.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.SaveData(System.Collections.Generic.Dictionary{System.String,TMcraft.PointInfo})">
            <summary>
            Saves a Dictionary Type that is defined by string keys and PointInfo data. Please note that this dictionary of data belongs to the current TMcraft node only.
            </summary>
            <param name="dataSet">A Dictionary type of data stored within the current node.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.GetData(System.String,System.String@)">
            <summary>
            Gets a string data, along with its corresponding string key. Please note that this data belongs to the current TMcraft node only.
            </summary>
            <param name="key">A string key that provides access to its corresponding data.</param>
            <param name="data">String type data being output.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.GetData(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
             Gets a Dictionary Type of data set, which correspondings to a certain List of string keys, from the current TMcraft Node.
            </summary>
            <param name="keys">A List of string keys that can provide access to several data stored within the current node.</param>
            <param name="dataSet"><![CDATA[Dictionary <string, object> being output.]]></param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.GetData(System.String,TMcraft.BaseInfo@)">
            <summary>
            Gets a specific BaseInfo type data from the current TMcraft node data storage according to the string key.
            </summary>
            <param name="key">A string key that provides access to the data.</param>
            <param name="data">BaseInfo type data being output.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.GetData(System.String,TMcraft.PointInfo@)">
            <summary>
            Gets a specific PointInfo type data from the current TMcraft node data storage according to the string key.
            </summary>
            <param name="key">A string key that provides access to the data.</param>
            <param name="data">PointInfo type data being output.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.DataStorageProvider.GetAllData(System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            Gets all data (Dictionary Type) from the current TMcraft node data storage.
            </summary>
            <param name="dataSet">A Dictionary type of all data stored within the current node.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="T:TMcraft.VariableProvider">
            <summary>
            VariableProvider provides functions for TMcraft to access or modify the variables of the robot.  
            </summary>
        </member>
        <member name="M:TMcraft.VariableProvider.GetProjectVariableList(System.Collections.Generic.List{TMcraft.VariableInfo}@)">
            <summary>
            Gets all Project Variables (VariableInfo Type) from the current TMflow Project and overwrites the input List.
            </summary>
            <param name="variables">A List of VariableInfo type that contains all Project Variables within the current Project.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.GetGlobalVariableList(System.Collections.Generic.List{TMcraft.VariableInfo}@)">
            <summary>
            Gets all Global Variables (VariableInfo Type) from the robot and overwrites the input List.
            </summary>
            <param name="variables">A List of Variable Info type that contains all global variables within the robot.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.CreateProjectVariable(System.String,TMcraft.VariableType,System.String)">
            <summary>
            Creates a new Project Variable to the current Project, according to the input parameters.
            </summary>
            <param name="name">Name of the variable being created.</param>
            <param name="type">Type of variable being created.</param>
            <param name="value">Value being assigned to the new variable.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.CreateGlobalVariable(System.String,TMcraft.VariableType,System.String)">
            <summary>
            Creates a new Global Variable, according to the input parameters.
            </summary>
            <param name="name">Name of the variable being created.</param>
            <param name="type">Type of variable being created.</param>
            <param name="value">Value being assigned to the new variable.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.ChangeProjectVariableValue(System.Collections.Generic.List{System.String[]})">
            <summary>
            Sets the initial value of a specific Project Variables.
            </summary>
            <param name="value">A list of Project Variables being modified; each element within this list should be a 2×1 string array {varName, varValue}, where varName is the name of the target variable while varValue is the value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.ChangeGlobalVariableValue(System.Collections.Generic.List{System.String[]})">
            <summary>
            Sets the value of a specific Global Variables.
            </summary>
            <param name="value">A list of global variables being modified; each element within this list should be a 2×1 string array {varName, varValue}, where varName is the name of the target variable and varValue is the value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.DeleteProjectVariable(System.String)">
            <summary>
            Deletes a specific Local Variable from the current TMflow Project.
            </summary>
            <param name="name">Name of the local variable being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.DeleteGlobalVariable(System.String)">
            <summary>
            Deletes a specific Global Variable from the robot.
            </summary>
            <param name="name">Name of the global variable being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.IsProjectVariableExist(System.String)">
            <summary>
            Check if a specific Project Variable exists or not.
            </summary>
            <param name="varName">Name of the Project Variable being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="M:TMcraft.VariableProvider.IsGlobalVariableExist(System.String)">
            <summary>
            Check if a specific Global Variable exists or not.
            </summary>
            <param name="varName">Name of the Global Variable being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="T:TMcraft.PointProvider">
            <summary>
            PointProvider provides functions for TMcraft Node to access or modify Point values within the current project.
            </summary>
        </member>
        <member name="M:TMcraft.PointProvider.GetPointList(System.Collections.Generic.List{TMcraft.PointInfo}@)">
            <summary>
            Gets the Point list of the current Project.
            </summary>
            <param name="points">A List of PointInfo objects that represents the list of points of the current Project.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.GetPointRobotConfigs(System.String,System.Int32[]@)">
            <summary>
            Gets the Robot Configs of a specific Point.
            </summary>
            <param name="pointName">Name of the target point.</param>
            <param name="robotConfigs">A 3×1 interger array representing the robot configurations of the target point. Here is the definition:
                                          <br/>int[0]: 0 – Right Arm, 1 – Left Arm
                                          <br/>int[1]: 2 – Above Elbow, 3 – Below Elbow
                                          <br/>int[2]: 4 – Up Wrist, 5 – Down Wrist</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.ChangePointRobotConfigs(System.String,System.Int32[])">
            <summary>
            Sets the Robot Configs of the specific Point.
            </summary>
            <param name="pointName">Name of the target point.</param>
            <param name="robotConfigs">A 3×1 interger array representing the robot configurations of the target point. Here is the definition:
                                          <br/>int[0]: 0 – Right Arm, 1 – Left Arm
                                          <br/>int[1]: 2 – Above Elbow, 3 – Below Elbow
                                          <br/>int[2]: 4 – Up Wrist, 5 – Down Wrist></param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.CreatePointByFlangeCoordinates(System.String,System.Single[],System.Int32[],System.String,System.String)">
            <summary>
            Create a new Point defined by Flange Coordinates (and by Point Name, Robot Configs, Base Name, and Tool Name).
            </summary>
            <param name="pointName">Name of the Point being created.</param>
            <param name="flangeCoordinate">A 6×1 float array {x, y, z, rx, ry, rz}, represents the Flange Coordinates defining the new point.</param>
            <param name="robotConfigs">A 3×1 interger array representing the robot configurations of the target point. Here is the definition:
                                          <br/>int[0]: 0 – Right Arm, 1 – Left Arm
                                          <br/>int[1]: 2 – Above Elbow, 3 – Below Elbow
                                          <br/>int[2]: 4 – Up Wrist, 5 – Down Wrist</param>
            <param name="baseName">The base, which defines the flange, coordinates.</param>
            <param name="toolName">The tool, which defines the point.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.CreatePointByToolCoordinates(System.String,System.Single[],System.Int32[],System.String,System.String)">
            <summary>
            Creates a new Point defined by end-effector Coordinates (and by Point Name, Robot Configs, Base Name, and Tool Name).
            </summary>
            <param name="pointName">Name of the point created.</param>
            <param name="endToolCoordinate">A 6×1 float array {x, y, z, rx, ry, rz}, represents the end-effector Coordinates defining the new point.</param>
            <param name="robotConfigs">A 3×1 interger array representing the robot configurations of the target point. Here is the definition:
                                          <br/>int[0]: 0 – Right Arm, 1 – Left Arm
                                          <br/>int[1]: 2 – Above Elbow, 3 – Below Elbow
                                          <br/>int[2]: 4 – Up Wrist, 5 – Down Wrist</param>
            <param name="baseName">The base which defines the end-effector coordinates.</param>
            <param name="toolName">The tool which defines the end-effector coordinates.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.CreatePointByJointAngles(System.String,System.Single[],System.String,System.String)">
            <summary>
            Creates a new Point defined by 6 Joint Angles (and by Point Name, Base Name, and Tool Name).
            </summary>
            <param name="pointName">Name of the point being created.</param>
            <param name="jointAngles">A 6×1 float array {x, y, z, rx, ry, rz}, represents the Joint Angles defining the new point.</param>
            <param name="baseName">The base which defines the point.</param>
            <param name="toolName">The tool which defines the point.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.ChangePointToolCoordinates(System.String,System.Single[])">
            <summary>
            Changes the Tool Coordinates of a specific Point.
            </summary>
            <param name="pointName">Name of the target point.</param>
            <param name="toolCoordinates">A 6×1 float array {x, y,z, rx, ry, rz} which represents the new Tool Coordinates.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.ChangePointBase(System.String,System.String)">
            <summary>
            Changes the base of a specific Point.
            </summary>
            <param name="pointName">Name of the target point.</param>
            <param name="baseName">Name of the Base being switched to.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.PointProvider.IsPointExist(System.String)">
            <summary>
            Check if a specific Point exists or not.
            </summary>
            <param name="pointName">Name of the point being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="T:TMcraft.RobotStatusProvider">
            <summary>
            RobotStatusProvider provides functions for TMcraft Node to access different robot status information.
            </summary>
        </member>
        <member name="E:TMcraft.RobotStatusProvider.EndButtonClickEvent">
            <summary>
            An event type denotes to the click event occurred on the buttons of the End Module, which Sets FreeBot settings. Function can be linked to this event so that it will be activated once the event is triggered.
            </summary>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetCurrentPoseByRobotBase(System.Single[]@)">
            <summary>
            Gets robot current TCP position defined by the Robot Base.
            </summary>
            <param name="currentPose">A 6×1 float array {x, y, z, rx, ry, rz} that denotes the current robot pose.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetCurrentPoseByCurrentBase(System.Single[]@)">
            <summary>
            Gets robot current TCP position defined by the Current Base.
            </summary>
            <param name="currentPose">A 6×1 float array {x, y, z, rx, ry, rz} that denotes the current robot pose.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetCurrentPoseByJointAngle(System.Single[]@)">
            <summary>
            Gets all robot current Joint Angles.
            </summary>
            <param name="jointAngles">A 6×1 float array {j1, j2, j3, j4, j5, j6} that denotes the current robot pose.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetCurrentRobotConfigs(System.Int32[]@)">
            <summary>
            Gets current Robot Config.
            </summary>
            <param name="robotConfigs">A 3×1 interger array representing the robot configurations of the target point. Here is the definition:
                                          <br/>int[0]: 0 – Right Arm, 1 – Left Arm
                                          <br/>int[1]: 2 – Above Elbow, 3 – Below Elbow
                                          <br/>int[2]: 4 – Up Wrist, 5 – Down Wrist</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.SetCurrentBase(System.String)">
            <summary>
            Assigns a specific Base as the current base.
            </summary>
            <param name="baseName">Name of the base being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetCurrentBaseName(System.String@)">
            <summary>
            Gets the name of the current Base.
            </summary>
            <param name="baseName">Current Base name.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetCurrentTcp(System.String@)">
            <summary>
            Gets the name of current TCP.
            </summary>
            <param name="tcpName">Current TCP name.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.SetCurrentTcp(System.String)">
            <summary>
            Assigns a specific TCP as the current TCP.
            </summary>
            <param name="tcpName">Name of the TCP being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.SetCurrentPayload(System.Single)">
            <summary>
            Sets a payload value to the robot (end-effector).
            </summary>
            <param name="payload">Payload value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetCurrentPayload(System.Single@)">
            <summary>
            Gets a payload value to the robot (end-effector).
            </summary>
            <param name="payload">Payload value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.GetFreeBot(TMcraft.FreeBotInfo@)">
            <summary>
            Gets the value of the current FreeBot settings.
            </summary>
            <param name="freeBot">Value of the current FreeBot settings defined by FreeBotInfo.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotStatusProvider.SetFreeBot(TMcraft.FreeBotInfo)">
            <summary>
            Sets FreeBot setting
            </summary>
            <param name="freeBot">A FreeBotInfo being assigned as FreeBot settings.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="T:TMcraft.BaseProvider">
            <summary>
             BaseProvider provides functions for TMcraft Node to access or modify the base value of the current Project.
            </summary>
        </member>
        <member name="M:TMcraft.BaseProvider.GetBaseList(System.Collections.Generic.List{TMcraft.BaseInfo}@)">
            <summary>
            Gets the Base list of the current Project
            </summary>
            <param name="bases">A List of BaseInfo objects.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.BaseProvider.CreateNewBase(System.String,System.Single[])">
            <summary>
            Creates a new Base.
            </summary>
            <param name="baseName">Name of the base being created.</param>
            <param name="baseData">A 6×1 float array, {x, y, z, rx, ry, rz}, that defines the newly created base.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.BaseProvider.ChangeBaseValue(System.String,System.Single[])">
            <summary>
            Modifies a specific Base.
            </summary>
            <param name="baseName">Name of the target Base.</param>
            <param name="baseData">A 6×1 float array, {x, y, z, rx, ry, rz}, that can be the new value of the target Base.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.BaseProvider.DeleteBase(System.String)">
            <summary>
            Deletes a specific Base.
            </summary>
            <param name="baseName">Name of the Base being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.BaseProvider.IsBaseExist(System.String)">
            <summary>
            Check if a specific Base exists or not.
            </summary>
            <param name="baseName">Name of the Base being checked.</param>
            <returns>True if the base exists, false if not.</returns>
        </member>
        <member name="T:TMcraft.IOProvider">
            <summary>
            IOProvider provides functions for TMcraft Node to interact with system I/O.
            </summary>
        </member>
        <member name="M:TMcraft.IOProvider.GetAllIOData(System.Collections.Generic.List{TMcraft.DeviceIOInfo}@)">
            <summary>
            Gets all IO status.
            </summary>
            <param name="ioData">A List of DeviceIOInfo objects that represents all IO status data.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.IOProvider.WriteDigitOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change the status of a specific Digital Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target digital output belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Output status, where bool true is HIGH and bool false is LOW.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.IOProvider.SetCameraLight(System.Boolean)">
            <summary>
            Switch the Eye-In-Hand camera light to the ON or OFF status.
            </summary>
            <param name="status">bool true means turning the light ON, bool false means turning the light OFF</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.IOProvider.ReadDigitInput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read the status of a specific Digital Input.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Digital Input belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Input status, where bool true is HIGH and bool false is LOW.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.IOProvider.ReadDigitOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read the status of a specific Digital Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Digital Output belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Input status, where bool true is HIGH and bool false is LOW.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.IOProvider.ReadAnalogInput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single@)">
            <summary>
            Read the status of a specific Analog Input.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Input belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Input value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.IOProvider.ReadAnalogOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single@)">
            <summary>
            Read the status of a specific Analog Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Output belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Output value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.IOProvider.WriteAnalogOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single)">
            <summary>
            Set the value of a specific Analog Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Output belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Output value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="T:TMcraft.TCPProvider">
            <summary>
            TcpProvider provides functions for TMcraft Node to access or modify TCPs with the robot.
            </summary>
        </member>
        <member name="M:TMcraft.TCPProvider.GetTcpList(System.Collections.Generic.List{TMcraft.TCPInfo}@)">
            <summary>
            Gets the list of all TCPs (with data) within the robot.
            </summary>
            <param name="tcpList">A List of TCPInfo type that represents all TCPs within the robot.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.GetProjectVisionTCPList(System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the list of Vision TCP Names from the current Project.
            </summary>
            <param name="visionTcpList">A List of vision TCP names.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.ChangeTcpPose(System.String,System.Single[])">
            <summary>
            Modifies the tool center point of a specific TCP by a 6×1 float array {x, y, z, rx, ry, rz}; refer to Flange Base.
            </summary>
            <param name="tcpName">Name of the target TCP being modified.</param>
            <param name="toolCenterPoint">A 6×1 float array[6] {x, y, z, rx, ry, rz} of new Pose value refer to Flange Base.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.CreateNewTcp(TMcraft.TCPInfo)">
            <summary>
            Create a new TCP by using a TCPInfo Type as input.
            </summary>
            <param name="tcpData">TCPInfo type assigned for the new TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.GetTcpMass(System.String,System.Single@)">
            <summary>
            Gets the value of mass (kg) from a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="mass">Mass value (kg) of the target TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.ChangeTcpMass(System.String,System.Single)">
            <summary>
            Modifies the mass value (kg) of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="mass">Mass value (kg) to be assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.GetTcpInertia(System.String,System.Single[]@)">
            <summary>
            Gets the inertia value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="inertiaValue">A 3×1 float array {Ixx, Iyy, Izz} that represents the inertia value of the target TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.ChangeTcpInertia(System.String,System.Single[])">
            <summary>
            Modifies the inertia value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="inertiaValue">A 3×1 float array {Ixx, Iyy, Izz} of inertia value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.GetTcpMassCenter(System.String,System.Single[]@)">
            <summary>
            Gets the Mass Center value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="massCenter">A 6×1 float array {x, y, z, rx, ry, rz} that represents the location of the mass center of the TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.ChangeTcpMassCenter(System.String,System.Single[])">
            <summary>
            Modifies the Mass Center value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="massCenter">A 6×1 float array {x, y, z, rx, ry, rz} that represents the location of the mass center of the TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.DeleteTcp(System.String)">
            <summary>
            Delete a specific TCP file.
            </summary>
            <param name="tcpName">Name of the TCP being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TCPProvider.IsTcpExist(System.String)">
            <summary>
            Check if a specific tcp exists or not.
            </summary>
            <param name="tcpName">Name of the tcp being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="T:TMcraft.VisionProvider">
            <summary>
            VisionProvider provides functions for TMcraft node to access or interact with the vision jobs of the current Project.
            </summary>
        </member>
        <member name="M:TMcraft.VisionProvider.GetVisionJobList(System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the list of Vision Job from the current Project.
            </summary>
            <param name="visionJobNames">List of vision jobs.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VisionProvider.GetVisionJobInitialPoint(System.String,System.Single[]@)">
            <summary>
            Gets the initial Point coordinates of a specific Vision Job.
            </summary>
            <param name="visionJobName">Name of the target vision job.</param>
            <param name="initialPoint">A 6×1 float array {x, y, z, rx, ry, rz} that represents the initial Point coordinates of the target Vision Job.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VisionProvider.GetVisionJobInitialBase(System.String,System.String@)">
            <summary>
            Gets the name of the initial Base of a specific Vision Job.
            </summary>
            <param name="visionJobName">Name of the target vision job.</param>
            <param name="baseName">Name of the initial base of the target Vision Job.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VisionProvider.CreateVisionJob(System.String)">
            <summary>
            Creates a new Vision Job and opens it with the Vision Designer Interface.
            </summary>
            <param name="visionJobName">Name of the target vision job being created.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VisionProvider.DeleteVisionJob(System.String)">
            <summary>
            Deletes a specific Vision Job.
            </summary>
            <param name="visionJobName">Name of the target vision job being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.VisionProvider.OpenVisionJob(System.String)">
            <summary>
            Opens a specific Vision Job with the Vision Designer Interface.
            </summary>
            <param name="visionJobName">Name of the target vision job being opened.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="T:TMcraft.RobotJogProvider">
            <summary>
            RobotJogProvider provides functions for TMcraft Node to jog the robot, either by commands or the Controller Interface.
            </summary>
        </member>
        <member name="M:TMcraft.RobotJogProvider.JogByJoint(System.Single,System.Single[])">
            <summary>
            Jogs the robot towards the targets Joint Angles. Please note that like using TMflow Controller, the user needs to use the Robot Stick (e.g., by pressing the Enabling Switch and the PLAY button) to start the motion.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (percentage) setting on the TMflow Controller, where the actual jogging speed should be equal to the maximum joint speed. The maximum joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should always be lower than Manual Control mode speed limit (250 mm/s). speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetJointAngles">A 6×1 float array {J1, J2, J3, J4, J5, J6} which represents the target Joint Angle.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotJogProvider.JogRelativeByTool(System.Single,System.Single[])">
            <summary>
            Jogs the robot along with Tool Axes. Remind that, like using TMflow Controller, user needs to use the robot stick (e.g. Enabling Device + PLAY) to start the motion.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (percentage) setting on the TMflow Controller, where the actual jogging speed should be equal to the maximum joint speed. The maximum joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should be always lower than Manual Control mode speed limit (250 mm/s).speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetMovementValue">A 6×1 float array {x, y, z, rx, ry ,rz} of target movement value.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotJogProvider.JogByBase(System.Single,System.Single[])">
            <summary>
            Jogs the robot towards the target’s Coordinates (relative to current base and tool) with a 6×1 float array {x, y, z, rx, ry ,rz}.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (percentage) setting on the TMflow Controller, where the actual jogging speed should be equal to the maximum join speed. The maximum joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should always be lower than Manual Control mode speed limit (250 mm/s). speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetCoordinates">A 6×1 float array {x, y, z, rx, ry ,rz} of target movement value.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotJogProvider.StopJog">
            <summary>
            Stop all Jog motion immediately.
            </summary>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.RobotJogProvider.OpenControllerPanel">
             <summary>
            Open TMflow Controller Interface.
             </summary>
             <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="T:TMcraft.FileProvider">
            <summary>
            File management
            </summary>
        </member>
        <member name="M:TMcraft.FileProvider.GetTextFileList(System.String[]@)">
            <summary>
            取得TextFile列表
            </summary>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="M:TMcraft.FileProvider.GetIODDFileList(System.String[]@)">
            <summary>
            取得IODDFile列表
            </summary>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="M:TMcraft.FileProvider.GetEthernetSlaveList(System.String[]@)">
            <summary>
            取得EthernetSlave列表
            </summary>
            <param name="ethernetSlaveItems"></param>
            <returns></returns>
        </member>
        <member name="T:TMcraft.SystemProvider">
            <summary>
            SystemProvider provides functions for TMcraft Node to interact with TMflow System Settings.
            </summary>
        </member>
        <member name="M:TMcraft.SystemProvider.GetCurrentLanguageCulture(System.String@)">
            <summary>
            Gets the current language setting of the system.
            </summary>
            <param name="result">Current System language, e.g., en-US, zh-TW, zh-CN, ja-JP, de-DE, ko-KR</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.SystemProvider.GetTMflowType(TMcraft.TMflowType@)">
            <summary>
            Gets the current TMflow type of the system.
            </summary>
            <param name="type">Represent the TMflow type (e.g. Robot, AOIEdge, etc.) of the current system. For more detail, check the description of enum TMflowType.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="T:TMcraft.VariableType">
            <summary>
            Enum VariableType, paired with VariableProvider functions such as CreateLocalVariable() and CreateGlobalVariable(), defines variable types on TMflow.
            </summary>
        </member>
        <member name="F:TMcraft.VariableType.Integer">
            <summary>Integer</summary>
        </member>
        <member name="F:TMcraft.VariableType.Float">
            <summary>float</summary>
        </member>
        <member name="F:TMcraft.VariableType.Double">
            <summary>double</summary>
        </member>
        <member name="F:TMcraft.VariableType.String">
            <summary>string</summary>
        </member>
        <member name="F:TMcraft.VariableType.Byte">
            <summary>byte</summary>
        </member>
        <member name="F:TMcraft.VariableType.Boolean">
            <summary>bool</summary>
        </member>
        <member name="F:TMcraft.VariableType.IntegrArray">
            <summary>int []</summary>
        </member>
        <member name="F:TMcraft.VariableType.FloatArray">
            <summary>float []</summary>
        </member>
        <member name="F:TMcraft.VariableType.DoubleArray">
            <summary>double []</summary>
        </member>
        <member name="F:TMcraft.VariableType.StringArray">
            <summary>string []</summary>
        </member>
        <member name="F:TMcraft.VariableType.ByteArray">
            <summary>byte []</summary>
        </member>
        <member name="F:TMcraft.VariableType.BooleanArray">
            <summary>bool []</summary>
        </member>
        <member name="F:TMcraft.VariableType.Null">
            <summary>null</summary>
        </member>
        <member name="T:TMcraft.VariableInfo">
            <summary>
            VariableInfo, paired with VariableProvider functions such as GetGlobalVariableList(), describes all the information of a variable.
            </summary>
        </member>
        <member name="P:TMcraft.VariableInfo.Name">
            <summary>Name of the variable.</summary>
        </member>
        <member name="P:TMcraft.VariableInfo.Type">
            <summary>Variable type of the variable.</summary>
        </member>
        <member name="P:TMcraft.VariableInfo.value">
            <summary>Value of the variable.</summary>
        </member>
        <member name="P:TMcraft.VariableInfo.IsGlobal">
            <summary>True if it is a global variable; false if it is a project variable.</summary>
        </member>
        <member name="T:TMcraft.TMCDataStruct">
            <summary>
            TM Data Struct for editing node initial data.
            </summary>
        </member>
        <member name="T:TMcraft.DigitIOInfo">
            <summary>
            DigitIOInfo describes the information of a Digital I/O channel which is used as the List data type of DeviceIOinfo.DICollection and DeviceIOInfo.DOCollection.
            </summary>
        </member>
        <member name="F:TMcraft.DigitIOInfo.Value">
            <summary>
            True denotes HIGH while false denotes LOW.
            </summary>
        </member>
        <member name="F:TMcraft.DigitIOInfo.IsUserDefined">
            <summary>
            True denotes this Digital Channel is set as a User-Defined IO (that triggers a signal to a button of the Robot Stick, reads the signal from a stick button, or detects if an error occurs in the system).
            </summary>
        </member>
        <member name="T:TMcraft.DeviceIOInfo">
            <summary>
            The DeviceIOInfo describes all sorts of information related to a specific IO Device of the robot.
            </summary>
        </member>
        <member name="F:TMcraft.DeviceIOInfo.Type">
            <summary>
            IO device that this information describes.
            </summary>
        </member>
        <member name="F:TMcraft.DeviceIOInfo.deviceSerialNum">
            <summary>
            Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there is always one Control box IO board and one end module IO board.
            </summary>
        </member>
        <member name="F:TMcraft.DeviceIOInfo.DICollection">
            <summary>
            A List of DigitIOInfo Type, which represents all Digital Inputs within the IO Device and should be empty if there are no Digital Inputs. Please note that the index of the list represents the channel number.
            </summary>
        </member>
        <member name="F:TMcraft.DeviceIOInfo.DOCollection">
            <summary>
            A List of DigitIOInfo Type that represents all Digital Outputs within the IO Device and should be empty if there are no Digital Ouputs. Please note that the index of the list represents the channel number.
            </summary>
        </member>
        <member name="F:TMcraft.DeviceIOInfo.AOCollection">
            <summary>
            A List of float Type that represents all Analog Outputs within the IO Device and should be empty if there are no Analog Ouputs. Please note that the index of the list represents the channel number.
            </summary>
        </member>
        <member name="F:TMcraft.DeviceIOInfo.AICollection">
            <summary>
            A List of float Typethat represents all Analog Inputs within the IO Device and should be empty if there are no Analog Inputs. Please note that the index of the list represents the channel number.
            </summary>
        </member>
        <member name="T:TMcraft.IO_TYPE">
            <summary>
            Enum IO_TYPE, paired with IOProvider functions such as WriteDigitOutput(), defines the IO device within TM robot.
            </summary>
        </member>
        <member name="F:TMcraft.IO_TYPE.UNKNOWN">
            <summary>
            Represents an unknown device detected. When using IOProvider.GetAllIOData(), if there is any unknown device detected, IO_TYPE.UNKNOWN will be found within the DeviceIOInfo data
            </summary>
        </member>
        <member name="F:TMcraft.IO_TYPE.CONTROL_BOX">
            <summary>
            Control Box I/O.
            </summary>
        </member>
        <member name="F:TMcraft.IO_TYPE.END_MODULE">
            <summary>
            End Module I/O (Tool End I/O Interface).
            </summary>
        </member>
        <member name="F:TMcraft.IO_TYPE.EXT_MODULE">
            <summary>
            External I/O Device(s) connected to the robot.
            </summary>
        </member>
        <member name="T:TMcraft.DigitalIOInfo">
            <summary>
            Digital IO Information
            </summary>
        </member>
        <member name="T:TMcraft.AnalogIOInfo">
            <summary>
            Analog IO Information
            </summary>
        </member>
        <member name="T:TMcraft.LogExportSetting">
            <summary>
            Enum LogExportSetting,which is used as the input parameter of the function TMcraftShellA-PI.SystemProvider.ExportLog, represents the amount of log to be exported.
            </summary>
        </member>
        <member name="F:TMcraft.LogExportSetting.Today">
            <summary>
            Represents to export the log for today
            </summary>
        </member>
        <member name="F:TMcraft.LogExportSetting._3days">
            <summary>
            Represents to export the log for the past 3 days.
            </summary>
        </member>
        <member name="F:TMcraft.LogExportSetting._7days">
            <summary>
            Represents to export the log for the past 7 days.
            </summary>
        </member>
        <member name="F:TMcraft.LogExportSetting._14days">
            <summary>
            Represents to export the log for the past 14 days.
            </summary>
        </member>
        <member name="F:TMcraft.LogExportSetting.All">
            <summary>
            Represents to export all log within the robot.
            </summary>
        </member>
        <member name="T:TMcraft.ITMcraftNodeEntry">
            <summary>
            ITMcraftNodeEntry is an Interface provided by TMcraft API which defines a contract of being a TMcraft Node. Any class that implements this contract must provide an implementation of two members defined in the Interface: InitializeNode() and InscribeScript().
            </summary>
        </member>
        <member name="M:TMcraft.ITMcraftNodeEntry.InitializeNode(TMcraft.TMcraftNodeAPI)">
            <summary>
            Initializes the Node with user-defined actions.
            </summary>
            <param name="tMNodeEditor">The TMcraftNodeAPI object connects the TMcraft Node with TMflow.</param>
        </member>
        <member name="M:TMcraft.ITMcraftNodeEntry.InscribeScript(TMcraft.ScriptWriteProvider)">
            <summary>
             This function executes when TMcraft node is about to close and actions can be defined within it. Usually, the major action is using ScriptWriteProvider functions to define the script being executed during project run. Please note that, if AppendScript or AppendLine is used within this function, the previously saved script will be cleared and replaced by the script on the buffer..
            </summary>
            <param name="scriptWriter">A ScriptWriteProvider Object, which is used for calling AppendLine() or AppendScript().</param>
        </member>
        <member name="M:TMcraft.DeviceCommandManager.GetMessagesFrom">
            <summary>
            Start Push Notification listen
            </summary>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI">
            <summary>
            TMcraft.dll is a combination of the APIs of all sort of TMcraft items; for TMcraft Shell, please declare an object of the class TMcraftShellAPI and use the function within. Like other TMcraft API, TMcraftShellAPI contains different members (or providers) functions in order to interact with TMflow, such as creating Project variables or jogging the robot, etc.
            </summary>
        </member>
        <member name="F:TMcraft.TMcraftShellAPI.Version">
            <summary>
            A member of the TMcraftShellAPI class. Returns a string represents the version of the current TMcraft.dll and is read-only.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.GetErrMsg(System.UInt32,System.String@)">
            <summary>
            Output the error message according to the error code input. This function is used for checking the result of calling Provider functions.
            </summary>
            <param name="inputData">The unit error code returned by most Provider functions.</param>
            <param name="message">Response the associated error message by the input error code.</param>
            <returns>TMcraft.TMcraftErr	Returns TMcraftErr.OK if the function works properly; otherwise, returns the corresponding TMcraftErr. For more detail, please check enum TMcraft.TMcraftErr.</returns>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.ScriptProjectProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.RobotStickProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.VariableProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.RobotStatusProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.IOProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.RobotJogProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.SystemProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.ProjectRunProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftShellAPI.TCPProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.InitialTMcraftShell">
            <summary>
            Start the connection between TMcraft Shell and TMflow.
            </summary>
            <returns>Returns TMcraftErr.OK if the function works properly; otherwise, re-turns the corresponding TMcraftErr. For more detail, please check enum TMcraft.TMcraftErr.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.CloseShellConnection">
            <summary>
            Closes the connection between TMcraft Shell and TMflow.
            </summary>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider">
            <summary>
            ScriptProjectProvider provides functions for managing script projects, including creating new projects, retrieving existing ones, listing projects, and writing script projects.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.GetScriptProjectList(System.Collections.Generic.List{System.String[]}@)">
            <summary>
            Get the list of script project, along with information.
            </summary>
            <param name="projectsInfo">A list of string arrays represens all script projects within the robot. Each array contains the following information of a script porject: [Project Name, Build date, Last updated date, Initial speed percent-age, Project Type, Last execution date]</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.NewScriptProject(System.String)">
            <summary>
            Create a new script project.
            </summary>
            <param name="projectName">Name of the project to be created.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.OpenScriptProject(System.String)">
            <summary>
            Open a specific script project
            </summary>
            <param name="projectName">Name of the project to be opened.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.SaveScriptProject(System.String)">
            <summary>
            Save the opened script project with the given project name.
            </summary>
            <param name="projectName">Name of the project to be saved.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.WriteScriptProjectContent(System.String)">
            <summary>
            Replace the content of the opened script project with a new one.
            </summary>
            <param name="projectContent">Content to be written onto the opened script project.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.ReadScriptProjectContent(System.String@)">
            <summary>
            Read the content of the opened script project.
            </summary>
            <param name="projectContent">Content of the opened script project.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.ReadScriptProjectRemark(System.String,System.String@)">
            <summary>
            Read the remark of a specific script project. Note that it is available to read or write the remark only if that project is not opened currently. Project remark is a kind of editable information stored within a script project.
            </summary>
            <param name="projectName">Name of the script project to be read.</param>
            <param name="projectRemark">Project remark Outputs as a string.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.WriteScriptProjectRemark(System.String,System.String)">
            <summary>
            Replace the remark of a specific script project with the new one. Note that it is available to read or write the remark only if that project is not opened currently. Project remark is a kind of ed-itable information stored within a script project.
            </summary>
            <param name="projectName">Name of the target script project.</param>
            <param name="projectRemark">Project remark Outputs as a string.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellScriptProjectProvider.DeleteScriptProject(System.String)">
            <summary>
            Delete a specific script project.
            </summary>
            <param name="projectName">Name of the project to be deleted.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellVariableProvider">
            <summary>
            Provides functions for TMcraft to access or modify the variables of the robot.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.GetGlobalVariableList(System.Collections.Generic.List{TMcraft.VariableInfo}@)">
            <summary>
            Gets all Global Variables (VariableInfo Type) from the robot and overwrites the input List.
            </summary>
            <param name="variables">A List of Variable Info type that contains all global variables within the robot.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.CreateGlobalVariable(System.String,TMcraft.VariableType,System.String)">
            <summary>
            Creates a new global variable by the input parameters.
            </summary>
            <param name="name">Name of the variable being created.</param>
            <param name="type">Type of variable being created.</param>
            <param name="value">Value being assigned to the new variable.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.ChangeGlobalVariableValue(System.Collections.Generic.List{System.String[]})">
            <summary>
            Sets the value of a specific Global Variables.
            </summary>
            <param name="value">A list of global variables being modified; each element within this list should be a 2×1 string array {varName, varValue}, where varName is the name of the target variable and varValue is the value being assigned.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.DeleteGlobalVariable(System.String)">
            <summary>
            Deletes a specific Global Variable from the robot.
            </summary>
            <param name="name">Name of the global variable being deleted.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.IsGlobalVariableExist(System.String)">
            <summary>
            Checks if a specific Global Variable exists or not.
            </summary>
            <param name="varName">Name of the Global Variable being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.GetGlobalVariableValue(System.String,System.String@)">
            <summary>
            Gets the value of a specfici global variable.
            </summary>
            <param name="varName">Represents the name of the target global variable.</param>
            <param name="value">Outputs the value of {varName}</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.GetVariableRuntimeValue(System.String,System.String@)">
            <summary>
            Gets the runtime value of a specific variable.
            </summary>
            <param name="varName">Represents the name of the target variable.</param>
            <param name="value">Outputs the value of {varName}</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellVariableProvider.ChangeVariableRuntimeValue(System.String,System.String)">
            <summary>
            Changes the runtime value of a specific variable.
            </summary>
            <param name="varName">Represents the name of the project variable to be changed.</param>
            <param name="value">Represents the value to be assigned.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellRobotStickProvider">
            <summary>
            RobotStickProvider provides functions for developing a virtual robot stick on TMcraft Shell.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStickProvider.RobotVirtualStickKeyEvent(TMcraft.VirtualKeyEvent)">
            <summary>
            Trigger a robot stick signal according to the input parameter.
            </summary>
            <param name="virtualKeyEvent">Robot stick signal. For more detail, please check the TMcraft enum VirtualKeyEvent.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStickProvider.RobotStickStatus(System.Boolean@)">
            <summary>
            Denotes if the robot stick is either in local control or remote control. For more details, please refer to the Safety Manual.
            </summary>
            <param name="status">True means robot stick is in local control; false means robot stick is in remote control.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellSystemProvider">
            <summary>
            Provides functions for TMcraft item to interact with TMflow System Settings.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.GetCurrentLanguageCulture(System.String@)">
            <summary>
            Gets the current language setting of the system.
            </summary>
            <param name="result">Current System language, e.g., en-US, zh-TW, zh-CN, ja-JP, de-DE, ko-KR</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.GetTMflowType(TMcraft.TMflowType@)">
            <summary>
            Gets the current TMflow type of the system.
            </summary>
            <param name="type">Represent the TMflow type (e.g. Robot, AOIEdge, etc.) of the current system. For more detail, check the description of enum TMflowType.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.LogIn(System.String,System.String)">
            <summary>
            Login with the give user name and password.
            </summary>
            <param name="userName">User name to login the robot.</param>
            <param name="password">Password that belongs to the user name.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.LogOut">
            <summary>
            Logout.
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.GetControl(System.Boolean)">
            <summary>
            Get or release control of the robot.
            </summary>
            <param name="get">True means get control; false means release control.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.Shutdown">
            <summary>
            Shut down the robot.
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ShowTMflow">
            <summary>
            Hide TMcraft Shell and show TMflow GUI temporary. User can click the Back to Shell Button on TMflow (left upper corner) and back to TMcraft Shell.
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ImportProject(System.String,System.String)">
            <summary>
            Import a specific project to the robot
            </summary>
            <param name="robotName">Name of the folder where the system can find the item to be imported.</param>
            <param name="projectName">Name of the project to be exported.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ImportGlobalVariable(System.String,System.String)">
            <summary>
            Import a specific global variable to the robot.
            </summary>
            <param name="robotName">Name of the folder where the system can find the item to be imported.</param>
            <param name="varName">Name of the global variable to be imported.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ImportTCP(System.String,System.String)">
            <summary>
            Import a specific tcp to the robot.
            </summary>
            <param name="robotName">Name of the folder where the system can find the item to be imported.</param>
            <param name="tcpName">Name of the tcp to be exported.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ExportProject(System.String)">
            <summary>
            Export a specific project to the flash drive.
            </summary>
            <param name="projectName">Name of the project to be exported.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ExportGlobalVariable(System.String)">
            <summary>
            Export a specific global variable to the flash drive.
            </summary>
            <param name="varName">Name of the global variable to be exported.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ExportTCP(System.String)">
            <summary>
            Export a specific tcp to the flash drive.
            </summary>
            <param name="tcpName">Name of the tcp to be exported.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.ExportLog(TMcraft.LogExportSetting)">
            <summary>
            Export the log of the robot to the flash drive.
            </summary>
            <param name="logSetting">Log setting defined the amount of log to be exported. For more detail, please check the TMcraft enum: LogExportSetting.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.SetDateTime(System.DateTime)">
            <summary>
            Set the date and time of TMflow system.
            </summary>
            <param name="dateTime"></param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.GetDateTime(System.DateTimeOffset@)">
            <summary>
            Get the date and time of TMflow system.
            </summary>
            <param name="dateTimeOffset">Outputs a DataTimeOffset type, represents the current date and time of the TMflow system</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.GetTimeZone(System.String@,System.Boolean@)">
            <summary>
            Get the date and time of TMflow system.
            </summary>
            <param name="ID"></param>
            <param name="IsAutoAdjustDST"></param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.SetTimeZone(System.String,System.Boolean)">
            <summary>
            Set the date and time of TMflow system.
            </summary>
            <param name="ID">Time zone identifier</param>
            <param name="IsAutoAdjustDST">True means TMflow will automatically adjust the clock for daylight saving changes. Note that this parameter is significant if and only if that time zones support daylight saving time.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellSystemProvider.GetSupportTimeZoneList(System.Collections.Generic.List{System.TimeZoneInfo}@)">
            <summary>
            Get the time zone list of TMflow system.
            </summary>
            <param name="timeZoneInfos">Outputs a List of TimeZoneInfo type, represents the time zones supported by the TMflow system.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellIOProvider">
            <summary>
            IOProvider provides functions for TMcraft item to interact with system I/O.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.GetAllIOData(System.Collections.Generic.List{TMcraft.DeviceIOInfo}@)">
            <summary>
            Gets all IO status.
            </summary>
            <param name="ioData">A List of DeviceIOInfo objects that represents all IO status data.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.WriteDigitOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change the status of a specific Digital Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target digital output belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Output status, where bool true is HIGH and bool false is LOW.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.SetCameraLight(System.Boolean)">
            <summary>
            Switch the Eye-In-Hand camera light to the ON or OFF status.
            </summary>
            <param name="status">bool true means turning the light ON, bool false means turning the light OFF</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.ReadDigitInput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read the status of a specific Digital Input.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Digital Input belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Input status, where bool true is HIGH and bool false is LOW.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.ReadDigitOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read the status of a specific Digital Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Digital Outputs belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Outputs status, where bool true is HIGH and bool false is LOW.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.ReadAnalogInput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single@)">
            <summary>
            Read the status of a specific Analog Input.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog In-put belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Input value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.ReadAnalogOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single@)">
            <summary>
            Read the status of a specific Analog Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Outputs belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Outputs value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellIOProvider.WriteAnalogOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single)">
            <summary>
            Set the value of a specific Analog Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Outputs belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Outputs value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellProjectRunProvider">
            <summary>
            Provides functions related to project run.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellProjectRunProvider.RunProject">
            <summary>
            Run the current project.
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellProjectRunProvider.StopProject">
            <summary>
            Stop the current project.
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellProjectRunProvider.PauseProject">
            <summary>
            Pause the current running project. To continue the project run, use RunProject().
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellProjectRunProvider.SetCurrentProject(System.String)">
            <summary>
            Given a project name, set it as the current project.
            </summary>
            <param name="projectName">Name of the project to be the current project.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellProjectRunProvider.GetDisplayBoardInfo(System.String@)">
            <summary>
            Outputs the content currently shown on TMflow Display Board.
            </summary>
            <param name="info">Outputs the current Display Board Content with the following format: [{Background color},{Font color},{Tilte},{Content}].</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellProjectRunProvider.GetCurrentProject(System.String@)">
            <summary>
            Get the name of the current project.
            </summary>
            <param name="projectName">Name of the current project.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider">
            <summary>
            Provides functions for TMcraft items to access different robot status information.
            </summary>
        </member>
        <member name="E:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.EndButtonClickEvent">
            <summary>
            An event type denotes to the click event occurred on the buttons of the End Module. Function can be linked to this event so that it will be activated once the event is triggered.
            </summary>
        </member>
        <member name="E:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.ErrorEvent">
            <summary>
            An event type denotes to the error event occurred on the robot. Function can be linked to this event so that it will be activated once the event is triggered.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentPoseByRobotBase(System.Single[]@)">
            <summary>
            Gets robot current TCP position defined by the Robot Base.
            </summary>
            <param name="currentPose">A 6×1 float array {x, y, z, rx, ry, rz} that represents the current robot pose.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentPoseByCurrentBase(System.Single[]@)">
            <summary>
            Gets robot current TCP position defined by the Current Base.
            </summary>
            <param name="currentPose">A 6×1 float array {x, y, z, rx, ry, rz} that represents the current robot pose.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentPoseByJointAngle(System.Single[]@)">
            <summary>
            Gets all robot current Joint Angles.
            </summary>
            <param name="jointAngles">A 6×1 float array {j1, j2, j3, j4, j5, j6} that represents the current robot pose.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentRobotConfigs(System.Int32[]@)">
            <summary>
            Gets current Robot Config.
            </summary>
            <param name="robotConfigs">3×1 interger array representing the robot configurations of the target point. Here is the definition:
                                          <br/>int[0]: 0 – Right Arm, 1 – Left Arm
                                          <br/>int[1]: 2 – Above Elbow, 3 – Below Elbow
                                          <br/>int[2]: 4 – Up Wrist, 5 – Down Wrist</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.SetCurrentBase(System.String)">
            <summary>
            Assigns a specific Base as the current base.
            </summary>
            <param name="baseName">Name of the base being assigned.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentBaseName(System.String@)">
            <summary>
            Gets the name of the current Base.
            </summary>
            <param name="baseName">Current Base name.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentTcp(System.String@)">
            <summary>
            Gets the name of current TCP.
            </summary>
            <param name="tcpName">Current TCP name.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.SetCurrentTcp(System.String)">
            <summary>
            Assigns a specific TCP as the current TCP.
            </summary>
            <param name="tcpName">Name of the TCP being assigned.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.SetCurrentPayload(System.Single)">
            <summary>
            Sets a payload value to the robot (end-effector).
            </summary>
            <param name="payload">Payload value being assigned.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentPayload(System.Single@)">
            <summary>
            Gets a payload value to the robot (end-effector).
            </summary>
            <param name="payload">Payload value being assigned.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetFreeBot(TMcraft.FreeBotInfo@)">
            <summary>
            Gets Free Robot setting
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.SetFreeBot(TMcraft.FreeBotInfo)">
            <summary>
            Sets Free Robot setting
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetRobotModelType(System.String@)">
            <summary>
            Gets the model type of the robot.
            </summary>
            <param name="result">Model Type of the robot.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetFlowVersion(System.String@)">
            <summary>
            Gets the version of TMflow.
            </summary>
            <param name="result">TMflow version.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.RobotErrorOrNot(System.Boolean@)">
            <summary>
            Outputs if the robot is in error status or not.
            </summary>
            <param name="result">If the robot is in error status or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.RobotEstopOrNot(System.Boolean@)">
            <summary>
             Outputs if the robot is in E-stop status or not.
            </summary>
            <param name="result">If the robot is in E-stop status or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.ProjectPauseOrNot(System.Boolean@)">
            <summary>
            Outputs if the current project is paused or not.
            </summary>
            <param name="result">If the current project is paused or not. It would be True only if there is a running project and it is in pause status.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.ProjectRunOrNot(System.Boolean@)">
            <summary>
            Outputs if any project is running or not.
            </summary>
            <param name="result">If any project is running or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.ProjectEditOrNot(System.Boolean@)">
            <summary>
            Outputs if any project is under editing or not.
            </summary>
            <param name="result">If any project is under editing or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetOperationMode(System.Int32@)">
            <summary>
            Gets current operation mode.
            </summary>
            <param name="mode">Current operation mode, which includes: 0 – Manual and 1 – Auto.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentSpeedPercentage(System.Int32@)">
            <summary>
            Gets current speed percentage setting. Note that the speed percentage does not equal to the current actual speed of the robot, i.e., even if the robot is not moving, the speed percentage will not be zero.
            </summary>
            <param name="speedPercentage">Current speed percentage setting.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotStatusProvider.GetCurrentToolSpeed(System.String@)">
            <summary>
            Gets the current tool speed.
            </summary>
            <param name="speed">Current Tool speed.mm/s</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellRobotJogProvider">
            <summary>
            Provides functions for TMcraft item to jog the robot.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.JogByJoint(System.Single,System.Single[])">
            <summary>
            Jogs the robot towards the targets Joint Angles. Please note that like using TMflow Controller, users need to use the Robot Stick (e.g., by pressing the Enabling Switch and the PLAY button) to start the motion. Also, RobotStickPLAY function TMcraft API is available to start the motion.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (in percentage) setting on the TMflow Controller, where the current jogging speed should match the max joint speed. The max joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should always be lower than Manual Control mode speed limit (250㎜/s). speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetJointAngles">A 6×1 float array {J1, J2, J3, J4, J5, J6} which represents the target Joint Angle.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.JogRelativeByJoint(System.Single,System.Single[])">
            <summary>
            Jogs the robot relatively by given joint angles along with Tool Axes. Remind that, like using TMflow Controller, users need to use the robot stick (e.g. Enabling Device + PLAY) to start the motion. Also, RobotStickPLAY function TMcraft API is available to start the motion.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (in percentage) setting on the TMflow Controller, where the current jogging speed should match the max joint speed. The max joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should always be lower than Manual Control mode speed limit (250㎜/s). speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetJointAngles">A 6×1 float array {J1, J2, J3, J4, J5, J6} of target movement value.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.JogRelativeByTool(System.Single,System.Single[])">
            <summary>
            Jogs the robot along with Tool Axes. Remind that, like using TMflow Controller, user needs to use the robot stick (e.g. Enabling Device + PLAY) to start the motion.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (percentage) setting on the TMflow Controller, where the actual jogging speed should be equal to the maximum joint speed. The maximum joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should be always lower than Manual Control mode speed limit (250 mm/s).speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetMovementValue">A 6×1 float array {x, y, z, rx, ry ,rz} of target movement value.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.JogByBase(System.Single,System.Single[])">
            <summary>
            Jogs the robot towards the target’s Coordinates (relative to current base and tool) with a 6×1 float array {x, y, z, rx, ry ,rz}. Note that like using TMflow Controller, users need to use the Robot Stick (e.g., by pressing the Enabling Switch and the PLAY button ) to start the motion. Also, RobotStickPLAY function TMcraft API is available to start the motion.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (percentage) setting on the TMflow Controller, where the actual jogging speed should be equal to the maximum join speed. The maximum joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should always be lower than Manual Control mode speed limit (250 mm/s). speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetCoordinates">A 6×1 float array {x, y, z, rx, ry ,rz} of target movement value.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.JogRelativeByBase(System.Single,System.Single[])">
            <summary>
            Jogs the robot by relative motion according to the current base. Remind that, like using TMflow Controller, users need to use the robot stick (e.g. Enabling Device + PLAY) to start the motion. Also, RobotStickPLAY function TMcraft API is available to start the motion.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (in percentage) setting on the TMflow Controller, where the current jogging speed should match the max joint speed. The max joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should always be lower than Manual Control mode speed limit (250㎜/s). speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="targetCoordinates">A 6×1 float array {x, y, z, rx, ry ,rz} of target movement value.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.StopJog">
            <summary>
            Stops all Jog motion immediately.
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.KeepJogging">
            <summary>
            Keep the current jogging. This function should be keep sending every 100 - 500 ms until the jogging ends, otherwise, the jogging will stop automatically.
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.JogCircle(System.Single,System.Single[],System.Single[],System.Int32)">
            <summary>
            Jogs the end-effector circularly. Like circle node, the circue is always defined by 3 points: the initial position of the end-effector, a pass point and an end point. This function will not trigger any motion directly, as it requires following by either pressing the PLAY button on the robot stick (may also requires Enabling Switch) or using API functions: HoldPlayKeyToRun + KeepJogging.
            </summary>
            <param name="speedPercentage">Speed percentage is equivalent to the speed (in percentage) setting on the TMflow Controller, where the current jogging speed should match the max joint speed. The max joint speed of the robot model is multiplied by the speed percentage, and the product (TCP speed) of this multiplication should always be lower than Manual Control mode speed limit (250㎜/s). speedPercentage is expressed in decimals (e.g., 1.5 for 1.5%).</param>
            <param name="passPoint">The 2nd point required to define the circle, described by Cartesian Space.</param>
            <param name="endPoint">The last point required to define the circle, described by Cartesian Space.</param>
            <param name="targetAngle">Define how much arc of the circle to be jogged. If the target angle is 0, the trajectory will end at the end point.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellRobotJogProvider.HoldPlayKeyToRun(System.Boolean)">
            <summary>
            This function mimics the process of holding play key to start jogging motion.
            </summary>
            <param name="holdKey">True means to hold the key; false means to release the key.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftShellAPI.ShellTCPProvider">
            <summary>
            Provides functions for TMcraft to access or modify TCPs with the robot.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.GetTcpList(System.Collections.Generic.List{TMcraft.TCPInfo}@)">
            <summary>
            Gets the list of all TCPs (with data) within the robot.
            </summary>
            <param name="tcpList">A List of TCPInfo type that represents all TCPs within the robot.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.GetProjectVisionTCPList(System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the list of Vision TCP Names from the current Project.
            </summary>
            <param name="visionTcpList">A List of vision TCP names.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.ChangeTcpPose(System.String,System.Single[])">
            <summary>
            Modifies the tool center point of a specific TCP by a 6×1 float array {x, y, z, rx, ry, rz}; refer to Flange Base.
            </summary>
            <param name="tcpName">Name of the target TCP being modified.</param>
            <param name="toolCenterPoint">A 6×1 float array[6] {x, y, z, rx, ry, rz} of new Pose value refer to Flange Base.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.CreateNewTcp(TMcraft.TCPInfo)">
            <summary>
            Create a new TCP by using a TCPInfo Type as input.
            </summary>
            <param name="tcpData">TCPInfo type assigned for the new TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.GetTcpMass(System.String,System.Single@)">
            <summary>
            Gets the value of mass (kg) from a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="mass">Mass value (kg) of the target TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.ChangeTcpMass(System.String,System.Single)">
            <summary>
            Modifies the mass value (kg) of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="mass">Mass value (kg) to be assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.GetTcpInertia(System.String,System.Single[]@)">
            <summary>
            Gets the inertia value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="inertiaValue">A 3×1 float array {Ixx, Iyy, Izz} that represents the inertia value of the target TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.ChangeTcpInertia(System.String,System.Single[])">
            <summary>
            Modifies the inertia value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="inertiaValue">A 3×1 float array {Ixx, Iyy, Izz} of inertia value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.GetTcpMassCenter(System.String,System.Single[]@)">
            <summary>
            Gets the Mass Center value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="massCenter">A 6×1 float array {x, y, z, rx, ry, rz} that represents the location of the mass center of the TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.ChangeTcpMassCenter(System.String,System.Single[])">
            <summary>
            Modifies the Mass Center value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="massCenter">A 6×1 float array {x, y, z, rx, ry, rz} that represents the location of the mass center of the TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.DeleteTcp(System.String)">
            <summary>
            Delete a specific TCP file.
            </summary>
            <param name="tcpName">Name of the TCP being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftShellAPI.ShellTCPProvider.IsTcpExist(System.String)">
            <summary>
            Check if a specific tcp exists or not.
            </summary>
            <param name="tcpName">Name of the tcp being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="T:TMcraft.InternalEx">
            <summary>
            
            </summary>
        </member>
        <member name="T:TMcraft.ITMcraftToolbarEntry">
            <summary>
            ITMcraftToolbarEntry is an Interface provided by TMcraft API which defines a contract of being a TMcraft Toolbar. Any class that implements this contract must provide an implementation of a specific member function: InitializeToolbar().
            </summary>
        </member>
        <member name="M:TMcraft.ITMcraftToolbarEntry.InitializeToolbar(TMcraft.TMcraftToolbarAPI)">
            <summary>
            Initializes the Toolbar with user-defined actions.
            </summary>
            <param name="tMToolbarEditor">The TMcraftToolbarAPI object connects the TMcraft Toolbar with TMflow.</param>
        </member>
        <member name="T:TMcraft.TMcraftToolbarAPI">
            <summary>
            TMcraft.dll is a combination of the APIs of all sort of TMcraft items; for TMcraft Toolbar, please declare an object of the class TMcraftToolbarAPI and use the function within. Like other TMcraft API, TMcraftToolbarAPI contains different members (or providers) functions in order to interact with TMflow.
            </summary>
        </member>
        <member name="F:TMcraft.TMcraftToolbarAPI.Version">
            <summary>
            A member of the TMcraftToolbarAPI class. Returns a string represents the version of the current TMcraft.dll and is read-only.
            </summary>
        </member>
		<member name="F:TMcraft.TMcraftToolbarAPI.Close">
            <summary>
            Closes the TMcraft Toolbar.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.GetErrMsg(System.UInt32,System.String@)">
            <summary>
            Output the error message according to the error code input. This function is used for checking the result of calling Provider functions.
            </summary>
            <param name="inputData">The unit error code returned by most Provider functions.</param>
            <param name="message">Response the associated error message by the input error code.</param>
            <returns>Returns TMcraftErr.OK if the function works properly; otherwise, re-turns the corresponding TMcraftErr. For more detail, please check enum TMcraft.TMcraftErr.</returns>
        </member>
        <member name="P:TMcraft.TMcraftToolbarAPI.VariableProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftToolbarAPI.RobotStatusProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftToolbarAPI.IOProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftToolbarAPI.TCPProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TMcraft.TMcraftToolbarAPI.SystemProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.InitialTMcraftToolbar(System.Net.IPAddress)">
            <summary>
            Initializes the Toolbar with user-defined actions.
            </summary>
            <returns>none</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.Close">
            <summary>
            Closes the TMcraft Toolbar.
            </summary>
        </member>
        <member name="T:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider">
            <summary>
            VariableProvider provides functions for TMcraft to access or modify the variables of the robot.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.GetProjectVariableList(System.Collections.Generic.List{TMcraft.VariableInfo}@)">
            <summary>
            Gets all Project Variables (VariableInfo Type) from the current TMflow Project and overwrites the input List.
            </summary>
            <param name="variables">A List of VariableInfo type that contains all Project Variables within the current Project.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.GetGlobalVariableList(System.Collections.Generic.List{TMcraft.VariableInfo}@)">
            <summary>
            Gets all Global Variables (VariableInfo Type) from the robot and overwrites the input List.
            </summary>
            <param name="variables">A List of Variable Info type that contains all global variables within the robot.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.CreateGlobalVariable(System.String,TMcraft.VariableType,System.String)">
            <summary>
            Creates a new Global Variable, according to the input parameters.
            </summary>
            <param name="name">Name of the variable being created.</param>
            <param name="type">Type of variable being created.</param>
            <param name="value">Value being assigned to the new variable.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.ChangeProjectVariableValue(System.Collections.Generic.List{System.String[]})">
            <summary>
            Sets the initial value of a specific Project Variables.
            </summary>
            <param name="value">A list of Project Variables being modified; each element within this list should be a 2×1 string array {varName, varValue}, where varName is the name of the target variable while varValue is the value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.ChangeGlobalVariableValue(System.Collections.Generic.List{System.String[]})">
            <summary>
            Sets the value of a specific Global Variables.
            </summary>
            <param name="value">A list of global variables being modified; each element within this list should be a 2×1 string array {varName, varValue}, where varName is the name of the target variable and varValue is the value being assigned.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.DeleteGlobalVariable(System.String)">
            <summary>
            Deletes a specific Global Variable from the robot.
            </summary>
            <param name="name">Name of the global variable being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.IsProjectVariableExist(System.String)">
            <summary>
            Check if a specific Project Variable exists or not.
            </summary>
            <param name="varName">Name of the Project Variable being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.IsGlobalVariableExist(System.String)">
            <summary>
            Checks if a specific Global Variable exists or not.
            </summary>
            <param name="varName">Name of the Global Variable being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.GetGlobalVariableValue(System.String,System.String@)">
            <summary>
            Gets all Global Variables (VariableInfo Type) from the robot and overwrites the input List.
            </summary>
            <param name="varName">A List of Variable Info type that contains all global variables within the robot.</param>
            <param name="value"></param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarVariableProvider.GetVariableRuntimeValue(System.String,System.String@)">
            <summary>
            Gets a Project Variable (VariableInfo Type) from the robot when the project is running.
            </summary>
            <param name="varName"></param>
            <param name="value"></param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftToolbarAPI.ToolbarSystemProvider">
            <summary>
            SystemProvider provides functions for TMcraft item to interact with TMflow System Settings.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarSystemProvider.GetCurrentLanguageCulture(System.String@)">
            <summary>
            Gets the current language setting of the system.
            </summary>
            <param name="result">Current System language, e.g., en-US, zh-TW, zh-CN, ja-JP, de-DE, ko-KR</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarSystemProvider.GetTMflowType(TMcraft.TMflowType@)">
            <summary>
            Gets the current TMflow type of the system.
            </summary>
            <param name="type">Represent the TMflow type (e.g. Robot, AOIEdge, etc.) of the current system. For more detail, check the description of enum TMflowType.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider">
            <summary>
            IOProvider provides functions for TMcraft item to interact with system I/O.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.GetAllIOData(System.Collections.Generic.List{TMcraft.DeviceIOInfo}@)">
            <summary>
            Gets all IO status.
            </summary>
            <param name="ioData">A List of DeviceIOInfo objects that represents all IO status data.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.WriteDigitOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change the status of a specific Digital Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target digital output belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Output status, where bool true is HIGH and bool false is LOW.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.SetCameraLight(System.Boolean)">
            <summary>
            Switch the Eye-In-Hand camera light to the ON or OFF status.
            </summary>
            <param name="status">bool true means turning the light ON, bool false means turning the light OFF</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.ReadDigitInput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read the status of a specific Digital Input.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Digital Input belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Digital Input status, where bool true is HIGH and bool false is LOW.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.ReadDigitOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read the status of a specific Analog Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Outputs belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="status">Analog Outputs value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.ReadAnalogInput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single@)">
            <summary>
            Read the status of a specific Analog Input.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Input belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Input value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.ReadAnalogOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single@)">
            <summary>
            Read the status of a specific Analog Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Outputs belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Outputs value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarIOProvider.WriteAnalogOutput(TMcraft.IO_TYPE,System.Int32,System.Int32,System.Single)">
            <summary>
            Set the value of a specific Analog Output.
            </summary>
            <param name="type">The IO_TYPE enum that defines which device the target Analog Outputs belongs to.</param>
            <param name="deviceSerialNum">Device serial number, which always starts from 0 and is more meaningful if the target device is an external IO module because there might be multiple external IO module devices within the system. The number is 0 if the target device is the Control box IO board or end module IO board because there are only one Control box IO board and one end module IO board.</param>
            <param name="channelNum">Channel number.</param>
            <param name="value">Analog Outputs value, ranged from -10V to 10V.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider">
            <summary>
            RobotStatusProvider provides functions for TMcraft items to access different robot status information.
            </summary>
        </member>
        <member name="E:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.EndButtonClickEvent">
            <summary>
            An event type denotes to the click event occurred on the buttons of the End Module. Function can be linked to this event so that it will be activated once the event is triggered.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetCurrentPoseByRobotBase(System.Single[]@)">
            <summary>
            Gets robot current TCP position defined by the Robot Base.
            </summary>
            <param name="currentPose">A 6×1 float array {x, y, z, rx, ry, rz} that represents the current robot pose.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetCurrentPoseByCurrentBase(System.Single[]@)">
            <summary>
            Gets robot current TCP position defined by the Current Base.
            </summary>
            <param name="currentPose">A 6×1 float array {x, y, z, rx, ry, rz} that represents the current robot pose.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetCurrentPoseByJointAngle(System.Single[]@)">
            <summary>
            Gets all robot current Joint Angles.
            </summary>
            <param name="jointAngles">A 6×1 float array {j1, j2, j3, j4, j5, j6} that represents the current robot pose.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetCurrentRobotConfigs(System.Int32[]@)">
            <summary>
            Gets current Robot Config.
            </summary>
            <param name="robotConfigs">3×1 interger array representing the robot configurations of the target point. Here is the definition:
                                          <br/>int[0]: 0 – Right Arm, 1 – Left Arm
                                          <br/>int[1]: 2 – Above Elbow, 3 – Below Elbow
                                          <br/>int[2]: 4 – Up Wrist, 5 – Down Wrist</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.SetCurrentBase(System.String)">
            <summary>
            Assigns a specific Base as the current base.
            </summary>
            <param name="baseName">Name of the base being assigned.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetCurrentBaseName(System.String@)">
            <summary>
            Gets the name of the current Base.
            </summary>
            <param name="baseName">Current Base name.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetCurrentTcp(System.String@)">
            <summary>
            Gets the name of current TCP.
            </summary>
            <param name="tcpName">Current TCP name.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.SetCurrentTcp(System.String)">
            <summary>
            Assigns a specific TCP as the current TCP.
            </summary>
            <param name="tcpName">Name of the TCP being assigned.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.SetCurrentPayload(System.Single)">
            <summary>
            Sets a payload value to the robot (end-effector).
            </summary>
            <param name="payload">Payload value being assigned.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetCurrentPayload(System.Single@)">
            <summary>
            Gets a payload value to the robot (end-effector).
            </summary>
            <param name="payload">Payload value being assigned.</param>
             <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetFreeBot(TMcraft.FreeBotInfo@)">
            <summary>
            Gets the value of the current FreeBot settings.
            </summary>
			<param name="freeBot">Value of the current FreeBot settings defined by FreeBotInfo.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.SetFreeBot(TMcraft.FreeBotInfo)">
            <summary>
            Sets Free Robot setting
            </summary>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetRobotModeType(System.String@)">
            <summary>
            Gets the model type of the robot.
            </summary>
            <param name="result">Model Type of the robot.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetFlowVersion(System.String@)">
            <summary>
            Gets the version of TMflow.
            </summary>
            <param name="result">TMflow version.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.RobotErrorOrNot(System.Boolean@)">
            <summary>
            Outputs if the robot is in error status or not.
            </summary>
            <param name="result">If the robot is in error status or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.RobotEstopOrNot(System.Boolean@)">
            <summary>
            Outputs if the robot is under Estop status or not.
            </summary>
            <param name="result">If the robot is under Estop status or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.ProjectPauseOrNot(System.Boolean@)">
            <summary>
            Outputs if the current project is paused or not.
            </summary>
            <param name="result">If the current project is paused or not. It would be True only if there is a running project and it is in pause status.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.ProjectRunOrNot(System.Boolean@)">
            <summary>
            Outputs if any project is running or not.
            </summary>
            <param name="result">If any project is running or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.ProjectEditOrNot(System.Boolean@)">
            <summary>
            Outputs if any project is under editing or not.
            </summary>
            <param name="result">If any project is under editing or not.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarRobotStatusProvider.GetOperationMode(System.Int32@)">
            <summary>
            Gets current operation mode.
            </summary>
            <param name="mode">Current operation mode, which includes: 0 – Manual and 1 – Auto.</param>
            <returns>The error code that represents the result of the function calling.</returns>
        </member>
        <member name="T:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider">
            <summary>
            TcpProvider provides functions for TMcraft Node to access or modify TCPs with the robot.
            </summary>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.GetTcpList(System.Collections.Generic.List{TMcraft.TCPInfo}@)">
            <summary>
            Gets the list of all TCPs (with data) within the robot.
            </summary>
            <param name="tcpList">A List of TCPInfo type that represents all TCPs within the robot.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.GetProjectVisionTCPList(System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the list of Vision TCP Names from the current Project.
            </summary>
            <param name="visionTcpList">A List of vision TCP names.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.ChangeTcpPose(System.String,System.Single[])">
            <summary>
            Modifies the tool center point of a specific TCP by a 6×1 float array {x, y, z, rx, ry, rz}; refer to Flange Base.
            </summary>
            <param name="tcpName">Name of the target TCP being modified.</param>
            <param name="toolCenterPoint">A 6×1 float array[6] {x, y, z, rx, ry, rz} of new Pose value refer to Flange Base.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.CreateNewTcp(TMcraft.TCPInfo)">
            <summary>
            Create a new TCP by using a TCPInfo Type as input.
            </summary>
            <param name="tcpData">TCPInfo type assigned for the new TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.GetTcpMass(System.String,System.Single@)">
            <summary>
            Gets the value of mass (kg) from a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="mass">Mass value (kg) of the target TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.ChangeTcpMass(System.String,System.Single)">
            <summary>
            Modifies the mass value (kg) of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="mass">Mass value (kg) to be assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.GetTcpInertia(System.String,System.Single[]@)">
            <summary>
            Gets the inertia value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="inertiaValue">A 3×1 float array {Ixx, Iyy, Izz} that represents the inertia value of the target TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.ChangeTcpInertia(System.String,System.Single[])">
            <summary>
            Modifies the inertia value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="inertiaValue">A 3×1 float array {Ixx, Iyy, Izz} of inertia value being assigned.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.GetTcpMassCenter(System.String,System.Single[]@)">
            <summary>
            Gets the Mass Center value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="massCenter">A 6×1 float array {x, y, z, rx, ry, rz} that represents the location of the mass center of the TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.ChangeTcpMassCenter(System.String,System.Single[])">
            <summary>
            Modifies the Mass Center value of a specific TCP.
            </summary>
            <param name="tcpName">Name of the target TCP.</param>
            <param name="massCenter">A 6×1 float array {x, y, z, rx, ry, rz} that represents the location of the mass center of the TCP.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.DeleteTcp(System.String)">
            <summary>
            Delete a specific TCP file.
            </summary>
            <param name="tcpName">Name of the TCP being deleted.</param>
            <returns>The error code that represents the result of the function calling</returns>
        </member>
        <member name="M:TMcraft.TMcraftToolbarAPI.ToolbarTCPProvider.IsTcpExist(System.String)">
            <summary>
            Check if a specific tcp exists or not.
            </summary>
            <param name="tcpName">Name of the tcp being checked.</param>
            <returns>True if exists, false if not.</returns>
        </member>
        <member name="T:TMcraft.TCPInfo">
            <summary>
            TCPInfo, which describes the basic information of a TCP, is the element type of the output List of TCPProvider.GetTcpList.().
            </summary>
        </member>
        <member name="F:TMcraft.TCPInfo.name">
            <summary>
            Name of the TCP.
            </summary>
        </member>
        <member name="F:TMcraft.TCPInfo.data">
            <summary>
            Tool Center Point, which defines a float[6] {x, y, z, Rx, Ry, Rz} relative to the Flange base.
            </summary>
        </member>
        <member name="T:TMcraft.BaseInfo">
            <summary>
            BaseInfo, which describes the information of a base, is the element typeof the output List of BaseProvider.GetBaseList().
            </summary>
        </member>
        <member name="F:TMcraft.BaseInfo.name">
            <summary>
            Name of the base.
            </summary>
        </member>
        <member name="F:TMcraft.BaseInfo.data">
            <summary>
            A 6×1 float array, {x, y, z, rx, ry, rz} that defines the base.
            </summary>
        </member>
        <member name="F:TMcraft.BaseInfo.type">
            <summary>
            Type of the base, such as R (Robot Base), C (Custom Base) and V (Vision Base).
            </summary>
        </member>
        <member name="F:TMcraft.BaseInfo.number">
            <summary>
            The serial number of the base within its base type; the robot base is always 0, while the other base types always start from 1.
            </summary>
        </member>
        <member name="T:TMcraft.PointInfo">
            <summary>
            PointInfo, which describes the information of a Point (robot pose) within the current Project, is the element type of the output List of PointProvider.GetBaseList(). Note that a robot pose can be defined by three kinds of coordinates: flange coordinates, joint angles and tool coordinates.
            </summary>
        </member>
        <member name="F:TMcraft.PointInfo.pointName">
            <summary>
            Name of the point.
            </summary>
        </member>
        <member name="F:TMcraft.PointInfo.flangeCoordinate">
            <summary>
            Flange Coordinates that defines this point (robot pose).
            </summary>
        </member>
        <member name="F:TMcraft.PointInfo.endToolCoordinate">
            <summary>
            Tool coordinates of this robot pose.
            </summary>
        </member>
        <member name="F:TMcraft.PointInfo.jointAngles">
            <summary>
            Joint Angles that defines this point (robot pose).
            </summary>
        </member>
        <member name="F:TMcraft.PointInfo.baseName">
            <summary>
            The base that defines this point (robot pose).
            </summary>
        </member>
        <member name="F:TMcraft.PointInfo.toolName">
            <summary>
            Tool that defines the tool coordinates of this point.
            </summary>
        </member>
        <member name="F:TMcraft.PointInfo.pointType">
            <summary>
            There are two possible point types: R (Regular) and D (Dynamic). The Regular point is a point generated with Point node, while the Dynamic point is a point generated with Touch Stop node.
            </summary>
        </member>
        <member name="T:TMcraft.RobotEventType">
            <summary>
            Enum RobotEventType, paired with IO_TYPE and RobotStatusProvider’s event EndButtonClickEvent, defines the click event occurred on the buttons of the End Module.
            </summary>
        </member>
        <member name="F:TMcraft.RobotEventType.EndButtonGripperChanged">
            <summary>
            Represents the click event of the Gripper Buttoon on the End Module. True denotes the button is pressed while False denotes that pressing is released.
            </summary>
        </member>
        <member name="F:TMcraft.RobotEventType.EndButtonPointChanged">
            <summary>
            Represents the click event of the Point Buttoon on the End Module. True denotes the button is pressed while False denotes that pressing is released.
            </summary>
        </member>
        <member name="F:TMcraft.RobotEventType.EndButtonVisionChanged">
            <summary>
            Represents the click event of the Vision Buttoon on the End Module. True denotes the button is pressed while False denotes that pressing is released.
            </summary>
        </member>
        <member name="F:TMcraft.RobotEventType.EndButtonFreeBotChanged">
            <summary>
            Represents the click event of the Free Button on the End Module. True denotes FreeBot is triggered while False denotes that the Free Button is either released or over-pressed.
            </summary>
        </member>
        <member name="T:TMcraft.FreeBotMode">
            <summary>
            Enum FreeBotMode, which is used as a member of the class FreeBotInfo and represents the current FreeBot mode. 
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotMode.All_Joints">
            <summary>
            Represents that the robot is currenly set as FreeBot with all joints.
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotMode.XYZ">
            <summary>
            Represents that the robot is currenly set as Freebot with X, Y and Z. 
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotMode.RXYZ">
            <summary>
            Represents that the robot is currenly set as Freebot with Rx, Ry and Rz. 
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotMode.SCARA_Like">
            <summary>
            Represents that the robot is currenly set as SCRAF-like FreeBot.
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotMode.Custom">
            <summary>
            Represents that the robot is currenly set as FreeBot with custom settings. 
            </summary>
        </member>
        <member name="T:TMcraft.FreeBotInfo">
            <summary>
            FreeBotInfo is a TMcraft class that defines the FreeRobot configuration and is applied by 2 of the RobotStatusProvider functions, GetFreeBot() and SetFreeBot(). Note that if the member, Mode, is not FreeBotMode.Custom, the rest of the members is meaningless.
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.Mode">
            <summary>
            Represents the FreeBot mode; for more detail, please check TMcraft enum FreeBotMode
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.isBaseMode">
            <summary>
            True means FreeBot Custom settings being defined by the current base; false means FreeBot Custom settings being defined by the current tool base. 
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.isFreeX">
            <summary>
            Represents if the current FreeBot Custom Setting has freed X axis or not.
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.isFreeY">
            <summary>
            Represents if the current FreeBot Custom Setting has freed Y axis or not. 
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.isFreeZ">
            <summary>
            Represents if the current FreeBot Custom Setting has freed Z axis or not.
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.isFreeRX">
            <summary>
            Represents if the current FreeBot Custom Setting has freed Rx axis or not.
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.isFreeRY">
            <summary>
            Represents if the current FreeBot Custom Setting has freed Ry axis or not. 
            </summary>
        </member>
        <member name="F:TMcraft.FreeBotInfo.isFreeRZ">
            <summary>
            Represents if the current FreeBot Custom Setting has freed Rz axis or not.
            </summary>
        </member>
		<member name="F:TMcraft.FreeBotInfo.MoveMode">
            <summary>
            Repressents the Move Mode setting of current Freebot; for more detail, please check TMcraft enum MoveMode.
            </summary>
        </member>
		
        <member name="T:TMcraft.MoveMode">
            <summary>
            Enum MoveMode,which is used as one of the parameter of the class FreeBotInfo. Move Mode is for users to adjust the initial damping of joints with modes of Accurate, Normal, and Fast. Damping increases the hand guide weight allowing faster stoppage while releasing the FREE button. For easier dragging, joint damping decreases proportionally as TCP speed increases during the hand guide. Once damping drops to zero, it stays at zero until the FREE button is released
            </summary>
        </member>
		<member name="F:TMcraft.MoveMode.Accurate">
            <summary>
            The highest joint damping. For the high initial force requirement with fast stoppage while releasing the FREE button.
            </summary>
        </member>
		<member name="F:TMcraft.MoveMode.Fast">
            <summary>
            The zero joint damping. For the low initial force requirement for dragging.
            </summary>
        </member>
		<member name="F:TMcraft.MoveMode.Normal">
            <summary>
            The low joint damping. For the medium initial force requirement with reasonable accuracy while stopping.
            </summary>
        </member>
        <member name="T:TMcraft.TMflowType">
            <summary>
            Enum TMflowType, which is the output of GetTMflowType() and represent the TMflow type of the current system, or more specifically, of where the GetTMflowType function is called.
            </summary>
        </member>
        <member name="F:TMcraft.TMflowType.Unknown">
            <summary>
            Represents that the current system is not recognizable as one of the TMflow type.
            </summary>
        </member>
        <member name="F:TMcraft.TMflowType.Robot">
            <summary>
            Represents that the current system is on the robot.
            </summary>
        </member>
        <member name="F:TMcraft.TMflowType.Client">
            <summary>
            Represents that the current system is client TMflow.
            </summary>
        </member>
        <member name="F:TMcraft.TMflowType.AOIEdge">
            <summary>
            Represents that the current system is AOI Edge.
            </summary>
        </member>
        <member name="F:TMcraft.TMflowType.OLP">
            <summary>
            Represents that the current system is TMstudio Pro.
            </summary>
        </member>
        <member name="T:TMcraft.VirtualKeyEvent">
            <summary>
            Enum VirtualKeyEvent, which is used as the parameter of the function RobotStickProvid-er.RobotVirtualStickKeyEvent.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.PlayKey">
            <summary>
            Represents a single press signal of Play Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.PauseKey">
            <summary>
            Represents a single press signal of Pause Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.PlusKey">
            <summary>
            Represents a single press signal of Plus Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.MinusKey">
            <summary>
            Represents a single press signal of Minus Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.MAKey">
            <summary>
            Represents a single press signal of MA (change mode) Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.StopKey">
            <summary>
            Represents a single press signal of Stop Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.StopLongKey">
            <summary>
            Represents a long press signal of Stop Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.MALongKey">
            <summary>
            Represents a long press signal of MA (change mode) Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.PlusLongKey">
            <summary>
            Represents a long press signal of Plus Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.MinusLongKey">
            <summary>
            Represents a long press signal of Minus Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.PlayLongKey">
            <summary>
            Represents a long press signal of Play Button.
            </summary>
        </member>
        <member name="F:TMcraft.VirtualKeyEvent.PauseLongKey">
            <summary>
            Represents a long press signal of Pause Button.
            </summary>
        </member>
        <member name="T:TMcraft.ErrorStatus">
            <summary>
            ErrorStatus denotes the structure of the data return by TMcraftShellAPI.ErrorEvent. Note that the ErrorEvent does not return this object type directly, but a json string instead that can be conveted to the ErrorStatus type.
            </summary>
        </member>
		<member name="F:TMcraft.ErrorStatus.Error_Code">
            <summary>
            The major error code of the current error event, which should be the first item of Error_Codes, i.e. Error_Codes[0]. Note that Er-ror_Code would be cleared after reset.
            </summary>
        </member>
		<member name="F:TMcraft.ErrorStatus.Error_Codes">
            <summary>
            All error codes related to the current error event. Note that Error_Codes would be cleared after reset.
            </summary>
        </member>
		<member name="F:TMcraft.ErrorStatus.Error_Time">
            <summary>
            Time stamp of Error_Code.
            </summary>
        </member>
		<member name="F:TMcraft.ErrorStatus.Last_Error_Code">
            <summary>
            The major error code of the last error event recorded, which should be the first item of Last_Error_Codes, i.e. Last_Error_Codes[0]. Note that Last_Error_Code would not be cleared after reset, but would be refreshed when another error event happens.
            </summary>
        </member>
		<member name="F:TMcraft.ErrorStatus.Last_Error_Codes">
            <summary>
            All error codes related to the last error event. Note that Last_Error_Codes would not be cleared after reset, but would be refreshed when another error event happens.
            </summary>
        </member>
		<member name="F:TMcraft.ErrorStatus.Last_Error_Time">
            <summary>
            Time stamp of Last_Error_Code.
            </summary>
        </member>
        <member name="T:TMcraft.TMcraftErr">
            <summary>
            Enum TMcraftErr represents the possible error that may occurred not from TMflow, but TMcraft API itself. TMcraftErr is used as the object type returned by the functions Close, GetErrMsg, etc.
            </summary>
        </member>
		<member name="F:TMcraft.TMcraftErr.ConnectionFail">
			<summary>
            TMcraft API failed to connect with TMflow.
            </summary>
		</member>
		<member name="F:TMcraft.TMcraftErr.DevResponseError">
			<summary>
            Unexpected error on TMcraft API. Please contact Techman Inc. for further analysis.
            </summary>
		</member>
		<member name="F:TMcraft.TMcraftErr.ExceptionError">
			<summary>
            Exception happended on TMCraft API. Please contact Techman Inc. for further analysis.
            </summary>
		</member>
		<member name="F:TMcraft.TMcraftErr.InvalidParameter">
			<summary>
            TMcraft API detects invalid parameters when calling provider functions. For example, empty string or incorrect array size.
            </summary>
		</member>
		<member name="F:TMcraft.TMcraftErr.NodeCloseFail">
			<summary>
            Failure happened when closing TMcraft Node on TMflow.
            </summary>
		</member>
		<member name="F:TMcraft.TMcraftErr.OK">
			<summary>
            No Error.
            </summary>
		</member>
		<member name="T:TMcraft.TMcraftErr.">
			<summary>
            
            </summary>
		</member>
        <member name="T:TMcraft.TmfCommand">
            <summary>
            Result of calling most of the TMcraft API functions, which return TMError.OK if a function work successfully. The rest of TMError items are also equivalent to TMflow error codes (although the former are expressed the decimal format).
            </summary>
        </member>
        <member name="T:TMCraftProtos.DeviceProtoReflection">
            <summary>Holder for reflection information generated from protos/DeviceProto.proto</summary>
        </member>
        <member name="P:TMCraftProtos.DeviceProtoReflection.Descriptor">
            <summary>File descriptor for protos/DeviceProto.proto</summary>
        </member>
        <member name="F:TMCraftProtos.PeerRequest.CommandFieldNumber">
            <summary>Field number for the "Command" field.</summary>
        </member>
        <member name="F:TMCraftProtos.PeerRequest.PayloadFieldNumber">
            <summary>Field number for the "Payload" field.</summary>
        </member>
        <member name="F:TMCraftProtos.PeerResponse.ErrorFieldNumber">
            <summary>Field number for the "Error" field.</summary>
        </member>
        <member name="F:TMCraftProtos.PeerResponse.PayloadFieldNumber">
            <summary>Field number for the "Payload" field.</summary>
        </member>
        <member name="F:TMCraftProtos.BytesRequest.CommandFieldNumber">
            <summary>Field number for the "Command" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesRequest.Command">
            <summary>
            指令
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesRequest.PayloadFieldNumber">
            <summary>Field number for the "Payload" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesRequest.Payload">
            <summary>
            指令的任意引數
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesRequest.LengthFieldNumber">
            <summary>Field number for the "Length" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesRequest.Length">
            <summary>
            檔案總大小(bytes)
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesRequest.IndexFieldNumber">
            <summary>Field number for the "Index" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesRequest.Index">
            <summary>
            起始索引
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesRequest.RateFieldNumber">
            <summary>Field number for the "Rate" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesRequest.Rate">
            <summary>
            進度百分比
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesRequest.BinFieldNumber">
            <summary>Field number for the "Bin" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesRequest.Bin">
            <summary>
            內容
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesResponse.ErrorFieldNumber">
            <summary>Field number for the "Error" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesResponse.Error">
            <summary>
            指令回應
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesResponse.PayloadFieldNumber">
            <summary>Field number for the "Payload" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesResponse.Payload">
            <summary>
            指令回應的任意引數
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesResponse.LengthFieldNumber">
            <summary>Field number for the "Length" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesResponse.Length">
            <summary>
            檔案總大小(bytes)
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesResponse.IndexFieldNumber">
            <summary>Field number for the "Index" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesResponse.Index">
            <summary>
            起始索引
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesResponse.RateFieldNumber">
            <summary>Field number for the "Rate" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesResponse.Rate">
            <summary>
            進度百分比
            </summary>
        </member>
        <member name="F:TMCraftProtos.BytesResponse.BinFieldNumber">
            <summary>Field number for the "Bin" field.</summary>
        </member>
        <member name="P:TMCraftProtos.BytesResponse.Bin">
            <summary>
            內容
            </summary>
        </member>
        <member name="P:TMCraftProtos.DeviceCommandProto.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase">
            <summary>Base class for server-side implementations of DeviceCommandProto</summary>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase.DeviceCommandService(TMCraftProtos.PeerRequest,Grpc.Core.ServerCallContext)">
            <summary>
            device command
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase.DeviceCorePeerService(TMCraftProtos.PeerRequest,Grpc.Core.ServerCallContext)">
            <summary>
            proxy server request response
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase.DeviceCoreStreamService(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.IServerStreamWriter{TMCraftProtos.PeerRequest},Grpc.Core.ServerCallContext)">
            <summary>
            proxy server stream
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase.DeviceCoreDownLoadService(TMCraftProtos.PeerRequest,Grpc.Core.IServerStreamWriter{TMCraftProtos.BytesResponse},Grpc.Core.ServerCallContext)">
            <summary>
            client download (proxy server upload)
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase.DeviceCoreUpLoadService(Grpc.Core.IAsyncStreamReader{TMCraftProtos.BytesRequest},Grpc.Core.IServerStreamWriter{TMCraftProtos.BytesResponse},Grpc.Core.ServerCallContext)">
            <summary>
            client upload (proxy server download)
            </summary>
            <param name="requestStream">Used for reading requests from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="T:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient">
            <summary>Client for DeviceCommandProto</summary>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.#ctor(Grpc.Core.ChannelBase)">
            <summary>Creates a new client for DeviceCommandProto</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for DeviceCommandProto that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCommandService(TMCraftProtos.PeerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            device command
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCommandService(TMCraftProtos.PeerRequest,Grpc.Core.CallOptions)">
            <summary>
            device command
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCommandServiceAsync(TMCraftProtos.PeerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            device command
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCommandServiceAsync(TMCraftProtos.PeerRequest,Grpc.Core.CallOptions)">
            <summary>
            device command
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCorePeerService(TMCraftProtos.PeerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            proxy server request response
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCorePeerService(TMCraftProtos.PeerRequest,Grpc.Core.CallOptions)">
            <summary>
            proxy server request response
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCorePeerServiceAsync(TMCraftProtos.PeerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            proxy server request response
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCorePeerServiceAsync(TMCraftProtos.PeerRequest,Grpc.Core.CallOptions)">
            <summary>
            proxy server request response
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCoreStreamService(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            proxy server stream
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCoreStreamService(Google.Protobuf.WellKnownTypes.Empty,Grpc.Core.CallOptions)">
            <summary>
            proxy server stream
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCoreDownLoadService(TMCraftProtos.PeerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            client download (proxy server upload)
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCoreDownLoadService(TMCraftProtos.PeerRequest,Grpc.Core.CallOptions)">
            <summary>
            client download (proxy server upload)
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCoreUpLoadService(Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            client upload (proxy server download)
            </summary>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.DeviceCoreUpLoadService(Grpc.Core.CallOptions)">
            <summary>
            client upload (proxy server download)
            </summary>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.DeviceCommandProtoClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.BindService(TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:TMCraftProtos.DeviceCommandProto.BindService(Grpc.Core.ServiceBinderBase,TMCraftProtos.DeviceCommandProto.DeviceCommandProtoBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
    </members>
</doc>
